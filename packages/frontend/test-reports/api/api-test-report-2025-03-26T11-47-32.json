{
  "collection": {
    "item": [
      {
        "id": "08ea9fa9-a732-4f01-9047-86d76eb3e2e4",
        "name": "API Availability Check",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "fbd35770-cc53-4bb1-a6fd-4b76ba289964",
              "type": "text/javascript",
              "exec": [
                "console.log('Running API availability check on ' + pm.request.url.toString());",
                "",
                "pm.test(\"Server is responding\", function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 301, 302, 307, 308]);",
                "});",
                "",
                "pm.test(\"Response exists\", function () {",
                "    pm.expect(pm.response.text()).to.not.be.empty;",
                "});",
                "",
                "console.log('Server responded with status: ' + pm.response.code);",
                "console.log('Response type: ' + pm.response.headers.get('Content-Type'));"
              ],
              "_lastExecutionId": "072336eb-c147-4419-a8fd-740d05d32812"
            }
          }
        ]
      },
      {
        "id": "2c9618d0-2308-485f-a732-c4f0d082a072",
        "name": "Health Check",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "pdfspark",
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "dccb5e5f-8ad1-48e2-8d12-76a3241ceafe",
              "type": "text/javascript",
              "exec": [
                "console.log('Running health check on ' + pm.request.url.toString());",
                "",
                "pm.test(\"Status code is valid\", function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 204, 301, 302, 307, 308]);",
                "});",
                "",
                "// Check if we have JSON content",
                "const contentType = pm.response.headers.get('Content-Type') || '';",
                "const isJson = contentType.includes('application/json');",
                "",
                "console.log('Response status: ' + pm.response.code);",
                "console.log('Content-Type: ' + contentType);",
                "console.log('Response body: ' + pm.response.text().substring(0, 100) + '...');",
                "",
                "if (pm.response.code >= 200 && pm.response.code < 300) {",
                "    if (isJson) {",
                "        try {",
                "            const jsonData = pm.response.json();",
                "            console.log('Received JSON data: ', jsonData);",
                "            ",
                "            // Flexible health check - different APIs might have different health response formats",
                "            pm.test(\"Response has valid health data\", function () {",
                "                // Common health check fields",
                "                const validFields = ['status', 'health', 'healthy', 'alive', 'state', 'uptime', 'version'];",
                "                const hasValidField = validFields.some(field => Object.keys(jsonData).includes(field));",
                "                ",
                "                pm.expect(hasValidField).to.be.true;",
                "                console.log('Health check has valid fields: ' + hasValidField);",
                "            });",
                "        } catch (e) {",
                "            console.log('Error parsing JSON: ' + e.message);",
                "            pm.test(\"Response should be valid JSON\", function() {",
                "                pm.expect.fail('Invalid JSON response');",
                "            });",
                "        }",
                "    } else {",
                "        // Non-JSON health checks are ok too",
                "        pm.test(\"Health check response received\", function () {",
                "            pm.expect(pm.response.text()).to.not.be.empty;",
                "        });",
                "    }",
                "} else {",
                "    console.log('Health endpoint not found at this URL path, will try alternatives');",
                "}"
              ],
              "_lastExecutionId": "25dd9f88-6e87-477c-94e7-be3c4c1165b2"
            }
          }
        ]
      },
      {
        "id": "15deb3ab-dac1-45aa-aa8b-e5141c8b089b",
        "name": "Alternative Health Check",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "8d4b133c-1f83-46e0-8b61-8722484c9e31",
              "type": "text/javascript",
              "exec": [
                "console.log('Running alternative health check on ' + pm.request.url.toString());",
                "",
                "pm.test(\"Status code is valid\", function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 204, 301, 302, 307, 308]);",
                "});",
                "",
                "// Check if we have JSON content",
                "const contentType = pm.response.headers.get('Content-Type') || '';",
                "const isJson = contentType.includes('application/json');",
                "",
                "console.log('Response status: ' + pm.response.code);",
                "console.log('Content-Type: ' + contentType);",
                "",
                "if (pm.response.code >= 200 && pm.response.code < 300) {",
                "    if (isJson) {",
                "        try {",
                "            const jsonData = pm.response.json();",
                "            console.log('Received JSON data: ', jsonData);",
                "            ",
                "            // Flexible health check",
                "            pm.test(\"Response has valid health data\", function () {",
                "                const validFields = ['status', 'health', 'healthy', 'alive', 'state', 'uptime', 'version'];",
                "                const hasValidField = validFields.some(field => Object.keys(jsonData).includes(field));",
                "                ",
                "                pm.expect(hasValidField).to.be.true;",
                "            });",
                "        } catch (e) {",
                "            console.log('Error parsing JSON: ' + e.message);",
                "            // Not failing test - might be another format",
                "        }",
                "    } else {",
                "        pm.test(\"Health check response received\", function () {",
                "            pm.expect(pm.response.text()).to.not.be.empty;",
                "        });",
                "    }",
                "}",
                "// Don't fail test if endpoint not found - might be using a different path"
              ],
              "_lastExecutionId": "386ff88b-917b-4963-84f1-4c7fe6af7867"
            }
          }
        ]
      },
      {
        "id": "2a4b6959-aad6-4808-a257-36aad8f588d5",
        "name": "Get Conversion Status",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "pdfspark",
              "api",
              "conversion",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": "test123"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a3d58111-92f7-4ca5-a582-0b1c29ea4811",
              "type": "text/javascript",
              "exec": [
                "console.log('Checking conversion status endpoint: ' + pm.request.url.toString());",
                "",
                "pm.test(\"Response status code is valid\", function () {",
                "    // Many backends might return different status codes for invalid/missing conversions",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 403, 401, 500]);",
                "});",
                "",
                "console.log('Response status: ' + pm.response.code);",
                "console.log('Response body: ' + pm.response.text().substring(0, 100) + '...');",
                "",
                "// Check if we're getting JSON response",
                "const contentType = pm.response.headers.get('Content-Type') || '';",
                "const isJson = contentType.includes('application/json');",
                "console.log('Content-Type: ' + contentType + ', isJson: ' + isJson);",
                "",
                "if (isJson) {",
                "    try {",
                "        const jsonData = pm.response.json();",
                "        console.log('JSON response:', jsonData);",
                "        ",
                "        if (pm.response.code === 200) {",
                "            pm.test(\"Successful response has conversion data\", function () {",
                "                // Different APIs might use different field names",
                "                const statusFields = ['status', 'state', 'conversionStatus'];",
                "                const hasStatusField = statusFields.some(field => jsonData.hasOwnProperty(field));",
                "                ",
                "                pm.expect(hasStatusField).to.be.true;",
                "            });",
                "        } else if (pm.response.code === 404 || pm.response.code === 400) {",
                "            pm.test(\"Error response has message\", function () {",
                "                const errorFields = ['error', 'message', 'errorMessage', 'details'];",
                "                const hasErrorField = errorFields.some(field => jsonData.hasOwnProperty(field));",
                "                ",
                "                pm.expect(hasErrorField).to.be.true;",
                "            });",
                "        }",
                "    } catch (e) {",
                "        console.log('Error parsing JSON: ' + e.message);",
                "        // Not failing - response might be non-JSON for errors",
                "    }",
                "}",
                "",
                "// If it's not a 200 OK response, we're assuming it's because the test123 ID doesn't exist",
                "// This is acceptable behavior - we just want to make sure the endpoint is operating",
                "if (pm.response.code !== 200) {",
                "    console.log('Non-200 response is acceptable - test123 ID likely does not exist on this backend');",
                "}"
              ],
              "_lastExecutionId": "da2e8035-c24e-46b4-9cf8-b01937b11a62"
            }
          }
        ]
      },
      {
        "id": "7670082c-aa52-47b8-a4da-b7ca40f9776d",
        "name": "Alternative Conversion Status",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "conversion",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": "test123"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f6f548da-34b4-47a4-9e9e-427de0fa11d3",
              "type": "text/javascript",
              "exec": [
                "console.log('Checking alternative conversion status endpoint: ' + pm.request.url.toString());",
                "",
                "pm.test(\"Response exists\", function () {",
                "    // Any response is fine, we're just checking if the endpoint exists",
                "    pm.expect(pm.response.code).to.be.greaterThan(0);",
                "});",
                "",
                "console.log('Response status: ' + pm.response.code);",
                "",
                "// Don't fail test if endpoint returns error - might be a different path pattern",
                "if (pm.response.code >= 200 && pm.response.code < 300) {",
                "    console.log('Alternative conversion status endpoint working');",
                "} else {",
                "    console.log('Alternative conversion status endpoint not found or returned error');",
                "}"
              ],
              "_lastExecutionId": "6a5721cc-79ba-49e0-92ab-464bbdde7b7c"
            }
          }
        ]
      },
      {
        "id": "8dd9b6b7-11bf-4695-9c71-36cde1fa39c3",
        "name": "PDF to DOCX Conversion",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "pdfspark",
              "api",
              "convert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "type": "file",
                "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.pdf"
              },
              {
                "key": "conversion_type",
                "value": "pdf_to_docx",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "9dcd4e43-5bc4-4103-8f69-031704bc5d3b",
              "type": "text/javascript",
              "exec": [
                "console.log('Testing PDF to DOCX conversion on: ' + pm.request.url.toString());",
                "",
                "pm.test(\"Response received\", function () {",
                "    // We accept a wide range of status codes as different APIs might have different requirements",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 400, 404, 415, 422, 500, 403, 401]);",
                "});",
                "",
                "console.log('Response status: ' + pm.response.code);",
                "console.log('Response body: ' + pm.response.text().substring(0, 200) + '...');",
                "",
                "// Check if we have JSON content",
                "const contentType = pm.response.headers.get('Content-Type') || '';",
                "const isJson = contentType.includes('application/json');",
                "",
                "if (pm.response.code >= 200 && pm.response.code < 300) {",
                "    if (isJson) {",
                "        try {",
                "            const jsonData = pm.response.json();",
                "            console.log('JSON response: ', jsonData);",
                "            ",
                "            pm.test(\"Response contains job information\", function () {",
                "                // Different backends might use different field names",
                "                const idFields = ['id', 'jobId', 'conversionId', 'taskId'];",
                "                const statusFields = ['status', 'state', 'conversionStatus'];",
                "                ",
                "                // We expect either an ID or a status field or both",
                "                const hasIdField = idFields.some(field => Object.keys(jsonData).includes(field));",
                "                const hasStatusField = statusFields.some(field => Object.keys(jsonData).includes(field));",
                "                ",
                "                pm.expect(hasIdField || hasStatusField).to.be.true;",
                "                console.log('Has ID or status field: ' + (hasIdField || hasStatusField));",
                "            });",
                "        } catch (e) {",
                "            console.log('Error parsing JSON: ' + e.message);",
                "            pm.test(\"Response should be valid JSON\", function() {",
                "                pm.expect.fail('Invalid JSON response');",
                "            });",
                "        }",
                "    } else {",
                "        // Some APIs might return a direct file download",
                "        pm.test(\"Response has content\", function () {",
                "            pm.expect(pm.response.text()).to.not.be.empty;",
                "        });",
                "    }",
                "} else {",
                "    // For error responses",
                "    console.log('Backend returned an error - this is expected if the API requires authentication or has other requirements');",
                "    ",
                "    if (isJson) {",
                "        try {",
                "            const jsonData = pm.response.json();",
                "            console.log('Error response:', jsonData);",
                "            ",
                "            pm.test(\"Error response has explanation\", function () {",
                "                const errorFields = ['error', 'message', 'errorMessage', 'details'];",
                "                const hasErrorField = errorFields.some(field => Object.keys(jsonData).includes(field));",
                "                ",
                "                pm.expect(hasErrorField).to.be.true;",
                "            });",
                "        } catch (e) {",
                "            console.log('Could not parse error response as JSON: ' + e.message);",
                "        }",
                "    }",
                "}"
              ],
              "_lastExecutionId": "c4c4bf91-d22d-41ed-9fec-3c2fd30693f7"
            }
          }
        ]
      },
      {
        "id": "5ce33ad7-860f-458d-8a2c-5aed866a26b0",
        "name": "Alternative PDF to DOCX Conversion",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "convert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "type": "file",
                "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.pdf"
              },
              {
                "key": "conversion_type",
                "value": "pdf_to_docx",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "513099cc-0abb-423a-b0a2-fdecf4ad8638",
              "type": "text/javascript",
              "exec": [
                "console.log('Testing alternative PDF to DOCX conversion endpoint: ' + pm.request.url.toString());",
                "",
                "pm.test(\"Response received\", function () {",
                "    pm.expect(pm.response.code).to.be.greaterThan(0);",
                "});",
                "",
                "console.log('Response status: ' + pm.response.code);",
                "",
                "// Don't fail test if endpoint returns error - might be a different path pattern",
                "if (pm.response.code >= 200 && pm.response.code < 300) {",
                "    console.log('Alternative conversion endpoint working');",
                "    console.log('Response: ' + pm.response.text().substring(0, 100) + '...');",
                "} else {",
                "    console.log('Alternative conversion endpoint not found or returned error');",
                "}"
              ],
              "_lastExecutionId": "854c3d35-844e-409d-909f-be2300d54dda"
            }
          }
        ]
      },
      {
        "id": "a15b6008-2159-4fd3-9136-cbe022a2b44b",
        "name": "DOCX to PDF Conversion",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "pdfspark",
              "api",
              "convert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "type": "file",
                "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.docx"
              },
              {
                "key": "conversion_type",
                "value": "docx_to_pdf",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "066a7abb-055e-4a2c-b864-c936f675c878",
              "type": "text/javascript",
              "exec": [
                "console.log('Testing DOCX to PDF conversion on: ' + pm.request.url.toString());",
                "",
                "pm.test(\"Response received\", function () {",
                "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 400, 404, 415, 422, 500, 403, 401]);",
                "});",
                "",
                "console.log('Response status: ' + pm.response.code);",
                "console.log('Response body: ' + pm.response.text().substring(0, 200) + '...');",
                "",
                "// Check if we have JSON content",
                "const contentType = pm.response.headers.get('Content-Type') || '';",
                "const isJson = contentType.includes('application/json');",
                "",
                "if (pm.response.code >= 200 && pm.response.code < 300) {",
                "    if (isJson) {",
                "        try {",
                "            const jsonData = pm.response.json();",
                "            console.log('JSON response: ', jsonData);",
                "            ",
                "            pm.test(\"Response contains job information\", function () {",
                "                // Different backends might use different field names",
                "                const idFields = ['id', 'jobId', 'conversionId', 'taskId'];",
                "                const statusFields = ['status', 'state', 'conversionStatus'];",
                "                ",
                "                // We expect either an ID or a status field or both",
                "                const hasIdField = idFields.some(field => Object.keys(jsonData).includes(field));",
                "                const hasStatusField = statusFields.some(field => Object.keys(jsonData).includes(field));",
                "                ",
                "                pm.expect(hasIdField || hasStatusField).to.be.true;",
                "            });",
                "        } catch (e) {",
                "            console.log('Error parsing JSON: ' + e.message);",
                "            pm.test(\"Response should be valid JSON\", function() {",
                "                pm.expect.fail('Invalid JSON response');",
                "            });",
                "        }",
                "    } else {",
                "        // Some APIs might return a direct file download",
                "        pm.test(\"Response has content\", function () {",
                "            pm.expect(pm.response.text()).to.not.be.empty;",
                "        });",
                "    }",
                "} else {",
                "    // For error responses",
                "    console.log('Backend returned an error - this is expected if the API requires authentication or has other requirements');",
                "    ",
                "    if (isJson) {",
                "        try {",
                "            const jsonData = pm.response.json();",
                "            console.log('Error response:', jsonData);",
                "            ",
                "            pm.test(\"Error response has explanation\", function () {",
                "                const errorFields = ['error', 'message', 'errorMessage', 'details'];",
                "                const hasErrorField = errorFields.some(field => Object.keys(jsonData).includes(field));",
                "                ",
                "                pm.expect(hasErrorField).to.be.true;",
                "            });",
                "        } catch (e) {",
                "            console.log('Could not parse error response as JSON: ' + e.message);",
                "        }",
                "    }",
                "}"
              ],
              "_lastExecutionId": "7907d0c3-758c-4bb4-89f0-e04ebd96b79b"
            }
          }
        ]
      },
      {
        "id": "9c21d91e-3d8b-4a6d-9af6-a1197416a9b0",
        "name": "Alternative DOCX to PDF Conversion",
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "convert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "type": "file",
                "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.docx"
              },
              {
                "key": "conversion_type",
                "value": "docx_to_pdf",
                "type": "text"
              }
            ]
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f5c245bc-1e76-44f5-8a56-4d66617a583d",
              "type": "text/javascript",
              "exec": [
                "console.log('Testing alternative DOCX to PDF conversion endpoint: ' + pm.request.url.toString());",
                "",
                "pm.test(\"Response received\", function () {",
                "    pm.expect(pm.response.code).to.be.greaterThan(0);",
                "});",
                "",
                "console.log('Response status: ' + pm.response.code);",
                "",
                "// Don't fail test if endpoint returns error - might be a different path pattern",
                "if (pm.response.code >= 200 && pm.response.code < 300) {",
                "    console.log('Alternative conversion endpoint working');",
                "    console.log('Response: ' + pm.response.text().substring(0, 100) + '...');",
                "} else {",
                "    console.log('Alternative conversion endpoint not found or returned error');",
                "}"
              ],
              "_lastExecutionId": "0a9e9391-331a-4f04-8d09-e9981cd5d46d"
            }
          }
        ]
      }
    ],
    "event": [],
    "variable": [
      {
        "description": {
          "content": "This will be dynamically replaced by the API test runner",
          "type": "text/plain"
        },
        "type": "any",
        "value": "http://localhost:3000",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "ded37d88-5cf3-41ec-9fe2-b110249d009a",
      "name": "PDFSpark API Tests",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Tests for the real backend API endpoints of PDFSpark conversion service",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "id": "7786da8c-cb31-49d9-94b0-f400f318168d",
    "values": []
  },
  "globals": {
    "id": "93630973-c589-4626-8a6b-2d15b0d0d4e7",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 14,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 9,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 2.5555555555555554,
      "responseMin": 1,
      "responseMax": 9,
      "responseSd": 2.454524670486058,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1742989652497,
      "completed": 1742989652629
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1ef8ef1e-329c-4999-8155-cfc240fd7086",
          "httpRequestId": "0a6f9a17-0051-4cb2-9e02-fe6886c1cd5a"
        },
        "item": {
          "id": "08ea9fa9-a732-4f01-9047-86d76eb3e2e4",
          "name": "API Availability Check",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "fbd35770-cc53-4bb1-a6fd-4b76ba289964",
                "type": "text/javascript",
                "exec": [
                  "console.log('Running API availability check on ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Server is responding\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 301, 302, 307, 308]);",
                  "});",
                  "",
                  "pm.test(\"Response exists\", function () {",
                  "    pm.expect(pm.response.text()).to.not.be.empty;",
                  "});",
                  "",
                  "console.log('Server responded with status: ' + pm.response.code);",
                  "console.log('Response type: ' + pm.response.headers.get('Content-Type'));"
                ],
                "_lastExecutionId": "072336eb-c147-4419-a8fd-740d05d32812"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "11e4add8-71cc-4dd7-9ded-96a6ec7df7b5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "942b9c26-71a6-46bd-8ff8-af6d5a47a3b8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "95"
            },
            {
              "key": "ETag",
              "value": "W/\"5f-XESjlA8XAHJVxqBoXgEC+jj2upg\""
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              104,
              116,
              109,
              108,
              62,
              60,
              98,
              111,
              100,
              121,
              62,
              60,
              104,
              49,
              62,
              80,
              68,
              70,
              83,
              112,
              97,
              114,
              107,
              32,
              77,
              111,
              99,
              107,
              32,
              83,
              101,
              114,
              118,
              101,
              114,
              60,
              47,
              104,
              49,
              62,
              60,
              112,
              62,
              84,
              104,
              105,
              115,
              32,
              105,
              115,
              32,
              97,
              32,
              109,
              111,
              99,
              107,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              116,
              101,
              115,
              116,
              105,
              110,
              103,
              60,
              47,
              112,
              62,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              60,
              47,
              104,
              116,
              109,
              108,
              62
            ]
          },
          "cookie": [],
          "responseTime": 9,
          "responseSize": 95
        },
        "id": "08ea9fa9-a732-4f01-9047-86d76eb3e2e4",
        "assertions": [
          {
            "assertion": "Server is responding",
            "skipped": false
          },
          {
            "assertion": "Response exists",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "66a2fb4b-1a46-44aa-b664-ddea970bf8ca",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "176fe230-8fe3-4b9b-89f5-3f8a1259eed0"
        },
        "item": {
          "id": "2c9618d0-2308-485f-a732-c4f0d082a072",
          "name": "Health Check",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "pdfspark",
                "api",
                "health"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dccb5e5f-8ad1-48e2-8d12-76a3241ceafe",
                "type": "text/javascript",
                "exec": [
                  "console.log('Running health check on ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Status code is valid\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 204, 301, 302, 307, 308]);",
                  "});",
                  "",
                  "// Check if we have JSON content",
                  "const contentType = pm.response.headers.get('Content-Type') || '';",
                  "const isJson = contentType.includes('application/json');",
                  "",
                  "console.log('Response status: ' + pm.response.code);",
                  "console.log('Content-Type: ' + contentType);",
                  "console.log('Response body: ' + pm.response.text().substring(0, 100) + '...');",
                  "",
                  "if (pm.response.code >= 200 && pm.response.code < 300) {",
                  "    if (isJson) {",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Received JSON data: ', jsonData);",
                  "            ",
                  "            // Flexible health check - different APIs might have different health response formats",
                  "            pm.test(\"Response has valid health data\", function () {",
                  "                // Common health check fields",
                  "                const validFields = ['status', 'health', 'healthy', 'alive', 'state', 'uptime', 'version'];",
                  "                const hasValidField = validFields.some(field => Object.keys(jsonData).includes(field));",
                  "                ",
                  "                pm.expect(hasValidField).to.be.true;",
                  "                console.log('Health check has valid fields: ' + hasValidField);",
                  "            });",
                  "        } catch (e) {",
                  "            console.log('Error parsing JSON: ' + e.message);",
                  "            pm.test(\"Response should be valid JSON\", function() {",
                  "                pm.expect.fail('Invalid JSON response');",
                  "            });",
                  "        }",
                  "    } else {",
                  "        // Non-JSON health checks are ok too",
                  "        pm.test(\"Health check response received\", function () {",
                  "            pm.expect(pm.response.text()).to.not.be.empty;",
                  "        });",
                  "    }",
                  "} else {",
                  "    console.log('Health endpoint not found at this URL path, will try alternatives');",
                  "}"
                ],
                "_lastExecutionId": "25dd9f88-6e87-477c-94e7-be3c4c1165b2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "pdfspark",
              "api",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2a59fc8b-00c1-4a5f-84c8-cb5421f9bfa1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e6bf037e-bc01-40d6-b668-da4c4efdfb0c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "33"
            },
            {
              "key": "ETag",
              "value": "W/\"21-xvrraPqyKis9ESs/lLusJOftkm8\""
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              111,
              107,
              34,
              44,
              34,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              34,
              58,
              34,
              49,
              46,
              48,
              46,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 33
        },
        "id": "2c9618d0-2308-485f-a732-c4f0d082a072",
        "assertions": [
          {
            "assertion": "Status code is valid",
            "skipped": false
          },
          {
            "assertion": "Response has valid health data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "eef38bb7-0a0b-4997-a7e0-ae5a9ad64a00",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8efd7ac6-0e7d-42da-b1cb-d280c8581841"
        },
        "item": {
          "id": "15deb3ab-dac1-45aa-aa8b-e5141c8b089b",
          "name": "Alternative Health Check",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "health"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8d4b133c-1f83-46e0-8b61-8722484c9e31",
                "type": "text/javascript",
                "exec": [
                  "console.log('Running alternative health check on ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Status code is valid\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 204, 301, 302, 307, 308]);",
                  "});",
                  "",
                  "// Check if we have JSON content",
                  "const contentType = pm.response.headers.get('Content-Type') || '';",
                  "const isJson = contentType.includes('application/json');",
                  "",
                  "console.log('Response status: ' + pm.response.code);",
                  "console.log('Content-Type: ' + contentType);",
                  "",
                  "if (pm.response.code >= 200 && pm.response.code < 300) {",
                  "    if (isJson) {",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Received JSON data: ', jsonData);",
                  "            ",
                  "            // Flexible health check",
                  "            pm.test(\"Response has valid health data\", function () {",
                  "                const validFields = ['status', 'health', 'healthy', 'alive', 'state', 'uptime', 'version'];",
                  "                const hasValidField = validFields.some(field => Object.keys(jsonData).includes(field));",
                  "                ",
                  "                pm.expect(hasValidField).to.be.true;",
                  "            });",
                  "        } catch (e) {",
                  "            console.log('Error parsing JSON: ' + e.message);",
                  "            // Not failing test - might be another format",
                  "        }",
                  "    } else {",
                  "        pm.test(\"Health check response received\", function () {",
                  "            pm.expect(pm.response.text()).to.not.be.empty;",
                  "        });",
                  "    }",
                  "}",
                  "// Don't fail test if endpoint not found - might be using a different path"
                ],
                "_lastExecutionId": "386ff88b-917b-4963-84f1-4c7fe6af7867"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2f47f6a6-ad5c-40f6-ae47-33532e0e4051",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "22c384ce-b814-48e9-8457-0658ddf3e93b",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "145"
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              104,
              101,
              97,
              108,
              116,
              104,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 145
        },
        "id": "15deb3ab-dac1-45aa-aa8b-e5141c8b089b",
        "assertions": [
          {
            "assertion": "Status code is valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1ffcd2ed-b74d-40e9-939e-8ad06fb26ac8",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "5dfcf3a2-8761-4b96-8406-bd713b4d57d5"
        },
        "item": {
          "id": "2a4b6959-aad6-4808-a257-36aad8f588d5",
          "name": "Get Conversion Status",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "pdfspark",
                "api",
                "conversion",
                "status"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "test123"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a3d58111-92f7-4ca5-a582-0b1c29ea4811",
                "type": "text/javascript",
                "exec": [
                  "console.log('Checking conversion status endpoint: ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Response status code is valid\", function () {",
                  "    // Many backends might return different status codes for invalid/missing conversions",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404, 400, 403, 401, 500]);",
                  "});",
                  "",
                  "console.log('Response status: ' + pm.response.code);",
                  "console.log('Response body: ' + pm.response.text().substring(0, 100) + '...');",
                  "",
                  "// Check if we're getting JSON response",
                  "const contentType = pm.response.headers.get('Content-Type') || '';",
                  "const isJson = contentType.includes('application/json');",
                  "console.log('Content-Type: ' + contentType + ', isJson: ' + isJson);",
                  "",
                  "if (isJson) {",
                  "    try {",
                  "        const jsonData = pm.response.json();",
                  "        console.log('JSON response:', jsonData);",
                  "        ",
                  "        if (pm.response.code === 200) {",
                  "            pm.test(\"Successful response has conversion data\", function () {",
                  "                // Different APIs might use different field names",
                  "                const statusFields = ['status', 'state', 'conversionStatus'];",
                  "                const hasStatusField = statusFields.some(field => jsonData.hasOwnProperty(field));",
                  "                ",
                  "                pm.expect(hasStatusField).to.be.true;",
                  "            });",
                  "        } else if (pm.response.code === 404 || pm.response.code === 400) {",
                  "            pm.test(\"Error response has message\", function () {",
                  "                const errorFields = ['error', 'message', 'errorMessage', 'details'];",
                  "                const hasErrorField = errorFields.some(field => jsonData.hasOwnProperty(field));",
                  "                ",
                  "                pm.expect(hasErrorField).to.be.true;",
                  "            });",
                  "        }",
                  "    } catch (e) {",
                  "        console.log('Error parsing JSON: ' + e.message);",
                  "        // Not failing - response might be non-JSON for errors",
                  "    }",
                  "}",
                  "",
                  "// If it's not a 200 OK response, we're assuming it's because the test123 ID doesn't exist",
                  "// This is acceptable behavior - we just want to make sure the endpoint is operating",
                  "if (pm.response.code !== 200) {",
                  "    console.log('Non-200 response is acceptable - test123 ID likely does not exist on this backend');",
                  "}"
                ],
                "_lastExecutionId": "da2e8035-c24e-46b4-9cf8-b01937b11a62"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "pdfspark",
              "api",
              "conversion",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": "test123"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f9b836d4-0fb9-456a-841b-70b955f4e54f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a8294480-305c-4cb1-8b8d-49037e79ee02",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "132"
            },
            {
              "key": "ETag",
              "value": "W/\"84-LCPJQsrOKLvdsgRRqA3KBYVX7Zc\""
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              49,
              50,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              99,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              44,
              34,
              112,
              114,
              111,
              103,
              114,
              101,
              115,
              115,
              34,
              58,
              49,
              48,
              48,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              49,
              58,
              52,
              55,
              58,
              51,
              50,
              46,
              53,
              53,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              95,
              97,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              49,
              58,
              52,
              55,
              58,
              51,
              50,
              46,
              53,
              53,
              54,
              90,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 132
        },
        "id": "2a4b6959-aad6-4808-a257-36aad8f588d5",
        "assertions": [
          {
            "assertion": "Response status code is valid",
            "skipped": false
          },
          {
            "assertion": "Successful response has conversion data",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1159cac9-3291-400f-8a62-ee30e4232442",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d1896675-fd7d-412a-a826-4a211d308489"
        },
        "item": {
          "id": "7670082c-aa52-47b8-a4da-b7ca40f9776d",
          "name": "Alternative Conversion Status",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "conversion",
                "status"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "test123"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6f548da-34b4-47a4-9e9e-427de0fa11d3",
                "type": "text/javascript",
                "exec": [
                  "console.log('Checking alternative conversion status endpoint: ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Response exists\", function () {",
                  "    // Any response is fine, we're just checking if the endpoint exists",
                  "    pm.expect(pm.response.code).to.be.greaterThan(0);",
                  "});",
                  "",
                  "console.log('Response status: ' + pm.response.code);",
                  "",
                  "// Don't fail test if endpoint returns error - might be a different path pattern",
                  "if (pm.response.code >= 200 && pm.response.code < 300) {",
                  "    console.log('Alternative conversion status endpoint working');",
                  "} else {",
                  "    console.log('Alternative conversion status endpoint not found or returned error');",
                  "}"
                ],
                "_lastExecutionId": "6a5721cc-79ba-49e0-92ab-464bbdde7b7c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "conversion",
              "status"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "id",
                "value": "test123"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "41229229-b862-4d2e-a488-9ba99aafb236",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "67a8c2d8-bf51-4e2b-a7de-8cc7c73295dd",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "160"
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              71,
              69,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              47,
              115,
              116,
              97,
              116,
              117,
              115,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 160
        },
        "id": "7670082c-aa52-47b8-a4da-b7ca40f9776d",
        "assertions": [
          {
            "assertion": "Response exists",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "87d9890c-d11d-4ae3-b7c6-1b067707d9bd",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f667cfad-e31a-4219-b05e-201cbc66c663"
        },
        "item": {
          "id": "8dd9b6b7-11bf-4695-9c71-36cde1fa39c3",
          "name": "PDF to DOCX Conversion",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "pdfspark",
                "api",
                "convert"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.pdf"
                },
                {
                  "key": "conversion_type",
                  "value": "pdf_to_docx",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9dcd4e43-5bc4-4103-8f69-031704bc5d3b",
                "type": "text/javascript",
                "exec": [
                  "console.log('Testing PDF to DOCX conversion on: ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Response received\", function () {",
                  "    // We accept a wide range of status codes as different APIs might have different requirements",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 400, 404, 415, 422, 500, 403, 401]);",
                  "});",
                  "",
                  "console.log('Response status: ' + pm.response.code);",
                  "console.log('Response body: ' + pm.response.text().substring(0, 200) + '...');",
                  "",
                  "// Check if we have JSON content",
                  "const contentType = pm.response.headers.get('Content-Type') || '';",
                  "const isJson = contentType.includes('application/json');",
                  "",
                  "if (pm.response.code >= 200 && pm.response.code < 300) {",
                  "    if (isJson) {",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('JSON response: ', jsonData);",
                  "            ",
                  "            pm.test(\"Response contains job information\", function () {",
                  "                // Different backends might use different field names",
                  "                const idFields = ['id', 'jobId', 'conversionId', 'taskId'];",
                  "                const statusFields = ['status', 'state', 'conversionStatus'];",
                  "                ",
                  "                // We expect either an ID or a status field or both",
                  "                const hasIdField = idFields.some(field => Object.keys(jsonData).includes(field));",
                  "                const hasStatusField = statusFields.some(field => Object.keys(jsonData).includes(field));",
                  "                ",
                  "                pm.expect(hasIdField || hasStatusField).to.be.true;",
                  "                console.log('Has ID or status field: ' + (hasIdField || hasStatusField));",
                  "            });",
                  "        } catch (e) {",
                  "            console.log('Error parsing JSON: ' + e.message);",
                  "            pm.test(\"Response should be valid JSON\", function() {",
                  "                pm.expect.fail('Invalid JSON response');",
                  "            });",
                  "        }",
                  "    } else {",
                  "        // Some APIs might return a direct file download",
                  "        pm.test(\"Response has content\", function () {",
                  "            pm.expect(pm.response.text()).to.not.be.empty;",
                  "        });",
                  "    }",
                  "} else {",
                  "    // For error responses",
                  "    console.log('Backend returned an error - this is expected if the API requires authentication or has other requirements');",
                  "    ",
                  "    if (isJson) {",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Error response:', jsonData);",
                  "            ",
                  "            pm.test(\"Error response has explanation\", function () {",
                  "                const errorFields = ['error', 'message', 'errorMessage', 'details'];",
                  "                const hasErrorField = errorFields.some(field => Object.keys(jsonData).includes(field));",
                  "                ",
                  "                pm.expect(hasErrorField).to.be.true;",
                  "            });",
                  "        } catch (e) {",
                  "            console.log('Could not parse error response as JSON: ' + e.message);",
                  "        }",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "c4c4bf91-d22d-41ed-9fec-3c2fd30693f7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "pdfspark",
              "api",
              "convert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5716490b-b16a-446b-b28b-133c06817cd7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "396",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "type": "file",
                "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.pdf"
              },
              {
                "key": "conversion_type",
                "value": "pdf_to_docx",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "08f58d72-2d13-421b-9033-3cd93b909d45",
          "status": "Accepted",
          "code": 202,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "125"
            },
            {
              "key": "ETag",
              "value": "W/\"7d-BHNYgHplUFqNW0u0LN2MrHMYSdk\""
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              109,
              111,
              99,
              107,
              45,
              49,
              55,
              52,
              50,
              57,
              56,
              57,
              54,
              53,
              50,
              53,
              56,
              51,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              32,
              115,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              34,
              58,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              115,
              97,
              109,
              112,
              108,
              101,
              45,
              116,
              101,
              115,
              116,
              46,
              112,
              100,
              102,
              34,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              53,
              51,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 125
        },
        "id": "8dd9b6b7-11bf-4695-9c71-36cde1fa39c3",
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          },
          {
            "assertion": "Response contains job information",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0b7fe7ff-7c61-4774-b93b-aac38e328e9c",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f18db3c6-cdab-4e11-816c-c626de7420f0"
        },
        "item": {
          "id": "5ce33ad7-860f-458d-8a2c-5aed866a26b0",
          "name": "Alternative PDF to DOCX Conversion",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "convert"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.pdf"
                },
                {
                  "key": "conversion_type",
                  "value": "pdf_to_docx",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "513099cc-0abb-423a-b0a2-fdecf4ad8638",
                "type": "text/javascript",
                "exec": [
                  "console.log('Testing alternative PDF to DOCX conversion endpoint: ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Response received\", function () {",
                  "    pm.expect(pm.response.code).to.be.greaterThan(0);",
                  "});",
                  "",
                  "console.log('Response status: ' + pm.response.code);",
                  "",
                  "// Don't fail test if endpoint returns error - might be a different path pattern",
                  "if (pm.response.code >= 200 && pm.response.code < 300) {",
                  "    console.log('Alternative conversion endpoint working');",
                  "    console.log('Response: ' + pm.response.text().substring(0, 100) + '...');",
                  "} else {",
                  "    console.log('Alternative conversion endpoint not found or returned error');",
                  "}"
                ],
                "_lastExecutionId": "854c3d35-844e-409d-909f-be2300d54dda"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "convert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c0fdadd-32da-4a93-ba1b-4f180a3fd184",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "396",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "type": "file",
                "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.pdf"
              },
              {
                "key": "conversion_type",
                "value": "pdf_to_docx",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "98c4d4e6-1638-4b82-9ff0-8d75aa1be587",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "151"
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              116,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 151
        },
        "id": "5ce33ad7-860f-458d-8a2c-5aed866a26b0",
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "545746b4-00d5-4802-a659-e1c1fd59ab3d",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a85d59b1-b2c2-4a74-9c29-b0f0b813d2d7"
        },
        "item": {
          "id": "a15b6008-2159-4fd3-9136-cbe022a2b44b",
          "name": "DOCX to PDF Conversion",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "pdfspark",
                "api",
                "convert"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.docx"
                },
                {
                  "key": "conversion_type",
                  "value": "docx_to_pdf",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "066a7abb-055e-4a2c-b864-c936f675c878",
                "type": "text/javascript",
                "exec": [
                  "console.log('Testing DOCX to PDF conversion on: ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Response received\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202, 400, 404, 415, 422, 500, 403, 401]);",
                  "});",
                  "",
                  "console.log('Response status: ' + pm.response.code);",
                  "console.log('Response body: ' + pm.response.text().substring(0, 200) + '...');",
                  "",
                  "// Check if we have JSON content",
                  "const contentType = pm.response.headers.get('Content-Type') || '';",
                  "const isJson = contentType.includes('application/json');",
                  "",
                  "if (pm.response.code >= 200 && pm.response.code < 300) {",
                  "    if (isJson) {",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('JSON response: ', jsonData);",
                  "            ",
                  "            pm.test(\"Response contains job information\", function () {",
                  "                // Different backends might use different field names",
                  "                const idFields = ['id', 'jobId', 'conversionId', 'taskId'];",
                  "                const statusFields = ['status', 'state', 'conversionStatus'];",
                  "                ",
                  "                // We expect either an ID or a status field or both",
                  "                const hasIdField = idFields.some(field => Object.keys(jsonData).includes(field));",
                  "                const hasStatusField = statusFields.some(field => Object.keys(jsonData).includes(field));",
                  "                ",
                  "                pm.expect(hasIdField || hasStatusField).to.be.true;",
                  "            });",
                  "        } catch (e) {",
                  "            console.log('Error parsing JSON: ' + e.message);",
                  "            pm.test(\"Response should be valid JSON\", function() {",
                  "                pm.expect.fail('Invalid JSON response');",
                  "            });",
                  "        }",
                  "    } else {",
                  "        // Some APIs might return a direct file download",
                  "        pm.test(\"Response has content\", function () {",
                  "            pm.expect(pm.response.text()).to.not.be.empty;",
                  "        });",
                  "    }",
                  "} else {",
                  "    // For error responses",
                  "    console.log('Backend returned an error - this is expected if the API requires authentication or has other requirements');",
                  "    ",
                  "    if (isJson) {",
                  "        try {",
                  "            const jsonData = pm.response.json();",
                  "            console.log('Error response:', jsonData);",
                  "            ",
                  "            pm.test(\"Error response has explanation\", function () {",
                  "                const errorFields = ['error', 'message', 'errorMessage', 'details'];",
                  "                const hasErrorField = errorFields.some(field => Object.keys(jsonData).includes(field));",
                  "                ",
                  "                pm.expect(hasErrorField).to.be.true;",
                  "            });",
                  "        } catch (e) {",
                  "            console.log('Could not parse error response as JSON: ' + e.message);",
                  "        }",
                  "    }",
                  "}"
                ],
                "_lastExecutionId": "7907d0c3-758c-4bb4-89f0-e04ebd96b79b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "pdfspark",
              "api",
              "convert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "55a80d7d-b937-46ec-9a2c-56b97c9887db",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "435",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "type": "file",
                "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.docx"
              },
              {
                "key": "conversion_type",
                "value": "docx_to_pdf",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "c94d6b31-2378-43a5-b1ea-ed1a92716902",
          "status": "Accepted",
          "code": 202,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "126"
            },
            {
              "key": "ETag",
              "value": "W/\"7e-8oN+OETAGjR458g0lgBNeapvqBY\""
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              109,
              111,
              99,
              107,
              45,
              49,
              55,
              52,
              50,
              57,
              56,
              57,
              54,
              53,
              50,
              54,
              48,
              56,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              117,
              115,
              34,
              58,
              34,
              112,
              101,
              110,
              100,
              105,
              110,
              103,
              34,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              111,
              110,
              118,
              101,
              114,
              115,
              105,
              111,
              110,
              32,
              115,
              116,
              97,
              114,
              116,
              101,
              100,
              34,
              44,
              34,
              102,
              105,
              108,
              101,
              34,
              58,
              123,
              34,
              102,
              105,
              108,
              101,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              115,
              97,
              109,
              112,
              108,
              101,
              45,
              116,
              101,
              115,
              116,
              46,
              100,
              111,
              99,
              120,
              34,
              44,
              34,
              115,
              105,
              122,
              101,
              34,
              58,
              51,
              53,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 126
        },
        "id": "a15b6008-2159-4fd3-9136-cbe022a2b44b",
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          },
          {
            "assertion": "Response contains job information",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "70adc25a-5c22-4c02-9c13-af8ae752086b",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "4fb212f4-86ae-4ce6-a67d-7af6557ddb2b"
        },
        "item": {
          "id": "9c21d91e-3d8b-4a6d-9af6-a1197416a9b0",
          "name": "Alternative DOCX to PDF Conversion",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3000",
              "path": [
                "api",
                "convert"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "file",
                  "type": "file",
                  "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.docx"
                },
                {
                  "key": "conversion_type",
                  "value": "docx_to_pdf",
                  "type": "text"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f5c245bc-1e76-44f5-8a56-4d66617a583d",
                "type": "text/javascript",
                "exec": [
                  "console.log('Testing alternative DOCX to PDF conversion endpoint: ' + pm.request.url.toString());",
                  "",
                  "pm.test(\"Response received\", function () {",
                  "    pm.expect(pm.response.code).to.be.greaterThan(0);",
                  "});",
                  "",
                  "console.log('Response status: ' + pm.response.code);",
                  "",
                  "// Don't fail test if endpoint returns error - might be a different path pattern",
                  "if (pm.response.code >= 200 && pm.response.code < 300) {",
                  "    console.log('Alternative conversion endpoint working');",
                  "    console.log('Response: ' + pm.response.text().substring(0, 100) + '...');",
                  "} else {",
                  "    console.log('Alternative conversion endpoint not found or returned error');",
                  "}"
                ],
                "_lastExecutionId": "0a9e9391-331a-4f04-8d09-e9981cd5d46d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3000",
            "path": [
              "api",
              "convert"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "73de0e39-1f43-4f8a-bd98-d5a5b2bdee36",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3000",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "435",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "file",
                "type": "file",
                "src": "/Users/user/conversion-microservices/packages/frontend/public/sample-test.docx"
              },
              {
                "key": "conversion_type",
                "value": "docx_to_pdf",
                "type": "text"
              }
            ]
          }
        },
        "response": {
          "id": "717820e3-26d9-417a-a8ed-83cf032571b8",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Access-Control-Allow-Headers",
              "value": "Origin, X-Requested-With, Content-Type, Accept"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "151"
            },
            {
              "key": "Date",
              "value": "Wed, 26 Mar 2025 11:47:32 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              67,
              97,
              110,
              110,
              111,
              116,
              32,
              80,
              79,
              83,
              84,
              32,
              47,
              97,
              112,
              105,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              116,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 151
        },
        "id": "9c21d91e-3d8b-4a6d-9af6-a1197416a9b0",
        "assertions": [
          {
            "assertion": "Response received",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 1118
    },
    "failures": [],
    "error": null
  }
}